name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Java (required for PySpark)
      run: |
        sudo apt-get update
        sudo apt-get install -y openjdk-8-jdk
        echo "JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64" >> $GITHUB_ENV

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov flake8 black isort

    - name: Lint with flake8
      run: |
        flake8 src/ api/ streamlit_app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ api/ streamlit_app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        black --check src/ api/ streamlit_app/

    - name: Import sort check with isort
      run: |
        isort --check-only src/ api/ streamlit_app/

    - name: Test with pytest
      run: |
        pytest tests/ --cov=src --cov=api --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build API image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: infra/Dockerfile
        target: api
        push: false
        tags: amazon-rag-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Streamlit image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: infra/Dockerfile
        target: streamlit
        push: false
        tags: amazon-rag-ui:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
